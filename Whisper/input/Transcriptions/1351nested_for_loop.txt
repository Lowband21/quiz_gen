 In this video, we're looking at an idea called nested for loops. To show you what we want to accomplish, here's some text showing what we'd like to output to the terminal. This text has five columns, five stars per row, and it is seven rows tall. I want to write a program that will produce this text. Here I have a program where I've set up the documentation, and I'm showing you that I could produce the text with seven print commands. If I run this, I get the output that I was saying that I wanted. However, this is a disappointing solution to the problem because it's inflexible, and it forces me to rewrite the entire program when I want to change the number of rows or the number of columns. Instead, I want to write the code in a flexible way so that I can easily change how big that rectangle of stars is. Let's start figuring out this program by trying to write just one single line of an output, a loop that will output five stars. My first attempt looks like this. I'm going to make a for loop. J will be the name of my loop variable. I'm going to do in the range of five. Remember that this range of five lets J traverse the values 0, 1, 2, 3, and 4. All I need to do is output a single asterisk, a star, within that loop. Let me run it and see if this does what I want. Well, sadly, this did not quite work because my five stars did not end all on the same line. They each were on a different line. The reason is a print statement in Python outputs a new line at the end, and we don't want one here. There's a way to suppress that new line from getting output to the terminal by just specifying that the end of my line I want to be an empty string. Let's run this again. Definitely better. I've got five stars, but if you look at the location of that dollar prompt, we really wanted that on the next line. I do want a new line. I just don't want it at the end of every star. I want it at the end of the for loop that outputs the five stars. I can't indent that print statement that will output a new line because that will then put a new line at the end of every star. I want it at the end of the entire for loop, so I'm not going to indent that line of code. So great, I've partially solved the problem. I now have five stars in one line. Now what I want to do is repeat this chunk of code seven times. I'll highlight the code that I want to repeat. There it is. Recall that to repeat a block of code multiple times, I put that block of code within a for loop. So I'm going to hit indent here to move that block of code in one level. I'm going to put it inside of a for loop, and that for loop is to repeat seven times. So the variable i goes through the value 0, 1, 2, 3, 4, 5, 6, and I have an inner for loop that outputs five stars. And that gets repeated within an outer for loop that repeats that line of five stars seven times. Let me run this. And there's the text that I wanted to output. Now notice here that the names of the variables in the loop don't matter. I could have said I want the outer loop to be called j and the inner loop to be called i. The code doesn't work any differently, except now i is counting which column I'm in, which star within a given row, and j is counting which row that I'm on. So because of that, it actually might be nice to give these names that indicate that. So I'll say for column in the range of five and for row in the range zero to six. Now to make things more general, I don't love at all that this seven and five are hard coded into my program. I'm going to now improve this a little bit by creating a variable that I'll call numRows, and I'll initialize it to seven, store the value seven into that variable. And now instead of having the number seven, I'll use the variable numRows. Similarly, I'll make the number of columns be five, and I'll use that variable to be the end of my range, the number of times I want to repeat the loop. This does not change the outcome of the program, but it does improve the way that it's documented so that others who read the code have an easier time making sense of it. To make this even more flexible, what I'm going to do now is allow the user to input the number of rows and columns. So I'll use an input statement and ask how many rows of stars do you want. This will cause an error because remember that an input statement gets a string from the user, and we want to convert it to an int. So I'll just put the type conversion in there, and I'll repeat the same thing for the number of columns. So now when I run it, I'm asking the user how many rows of stars do you want. Let's say I want 11, and how many columns? 23. And my program is going to output this rectangle of stars according to what the user asked for. Here's a reminder of another thing that you can do with the range command. Here, row is going to be an element of the sequence produced by this range. And range starts by default at zero and goes up two, but not including the value. So for example, if the user entered numRows as seven, then the row variable would take the values 0, 1, 2, 3, 4, 5, 6. And it could be that sometimes you want row, this variable, to start its counting at one. So in that case, I can start, instead of at zero, I can start at one. But if I go up to numRows, I'll be one short because I'll be going from one up to seven, but not including seven. So I can add a plus one here, and now row, the variable row, will take the values starting at one and going up to seven. We really didn't need it for this program, but later we'll see that sometimes we want the value of the variables to start at one instead of zero. And this is a way that you can renumber them.