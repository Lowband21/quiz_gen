 I'm going to show you a few examples of code that uses tuples. In this first example, I've created a variable that has the latitude and longitude of the ECS building as a tuple. What I just want to demonstrate is accessing the two values of the latitude and the longitude. I've got a print statement here that has a string that's going to output the latitude and the longitude. I'll do this as an F string. Right here, the location of the ECS building is latitude. Now here I need the index zero value of that tuple. I'll just say ECS at zero. That's how I access the first element. For the longitude, I have ECS at one. When I run this code, it outputs the latitude and the longitude from that tuple. In my next example, I've got box dimensions, which is a tuple with three values for the length, width, and height of a box. What I want to do is create a function called volume that will take that variable box dimensions, the tuple, and calculate the volume of that box. Let's see how to do this. The idea here is we're creating a function called volume that's going to take a tuple with three values for length, width, and height, and it's going to return the volume. To do this, I just need to calculate the product of dimensions at zero, dimensions at one, and dimensions at two, and then return that. There's the answer. I've got the volume of the box. Now this would be complete except that we're going to have a convention of always giving the type of the return value and the parameters of our functions. This function returns a float, the value of the volume, and it takes as a parameter a tuple. The tuple has three elements that are all of type float. This is the way that we're going to do the type hinting for our functions. In my third example, I'm going to show a little bit of an extension of the example I gave in the slides, where I've got cards that have a suit and a value. So far what I have in this code is a variable that's a list, that has a list of the four suits, and then another one called values, that's the list of all the values that a card can take. What I'm going to do is create a function. I haven't written it yet, but it's going to be called randomCard, and it's going to generate a random card with the values and suits that are natural for a deck of cards. That function is going to return a tuple because every card has a suit and a value, and then I'll print it just to make sure that it's all working. So the idea here is we're creating a function that returns a tuple. I need a random element from this suits list, and a random element from this values list. You already know one way to do it, which is you could create a random integer from 0 to 3 for the suits, and a random value from 0 to 13 for the values, and then access the lists, suits, and values at that random integer. However, I want to show you another way to do this because there actually exists a function in the random package that will give you a random choice from a list. The name of that function or method is random.choice. So I say random.choice from the list suits, and then I'm going to save that in a variable that I'm creating called random suit. So the random.choice method gives you a random element from that list. I'll do the same thing for random value, and now I have the suit and the value, and now I can create a tuple made from the random value and the random suit. Once I've created the tuple, I can just return that. Let me run this. Whoopsie, I've got a little bit of an indenting problem here. Let me run this, and here's my random card, the three of diamonds. If I run it again, I get a different random card, ace of clubs. So this shows you how a function can return a tuple as a way of returning two values at once. I will let you do the type hinting for this function that we've created. I'll leave that up to you.