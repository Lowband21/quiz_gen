 The next Python data structure that we'll study is the Python tuple. First, what is a tuple? Tuples are a way in Python of connecting together two or more variables into one container. You can pronounce a tuple or tuple. The idea is to have an ordered pair of values, a double, or a triple of values, or a quadruple, quintuple, etc. You may package as many values together into a tuple as makes sense for your application. The elements in a tuple do not have to be of the same type, although they may be. We often use tuples when the values to be put into the container are inextricably connected and that we really want to access them in conjunction. The syntax is to place the values within a pair of parentheses and separate the values with commas. Another important thing to know about tuples is that they are immutable. The values within a tuple cannot be changed once the tuple has been created. Here's an example. Think about an ordered pair giving a location in the xy-plane. In this image, vertex C is at the origin, and the origin has an x-coordinate of 0 and a y-coordinate of 0. So I can create a tuple representing that point by putting the two values 0, 0 separated by commas within a pair of parentheses. That makes the two values connect together into one object that I can then store in the variable origin. The type of the variable origin here is a tuple. Here are two more of the vertices in this picture. Vertex A is the tuple that has 6 and 4 as its elements, and vertex B has negative 6 and 9. This third line here is actually slightly different because I'm taking the variable origin, which contains a tuple, and I'm storing it in the variable vertex C, which is now also a tuple. Once you've created the tuple, you can look at an individual value within the tuple by using an index. For example here, vertex B at index 1, let's see what that is. I go to the vertex B variable, which is a tuple with two elements. 0 of that tuple has a value negative 6, and index 1 has a value of 9. You can unpack the values in a tuple into separate variables like this. Take the value vertex B, which is a tuple with a negative 6 and a 9, and store it into a tuple with BX as the first element and BY a variable as the second element. This stores the value negative 6 into BX and the number 9 into BY. Another example is GPS locations, which specify a position on Earth, and these GPS locations have two values that represent latitude and longitude. For example, the Engineering and Computer Science building at DU has this GPS location. 9.6743, because it's positive, means that's the degrees above the equator, and negative 104.9615 gives the degrees west of the prime meridian. And as before, we can access the individual values by looking at index 0 for the latitude and index 1 of the longitude. Here's a few more examples. A positive value for the longitude means east of the prime meridian, and a negative value for the latitude means south of the equator. As a third example, if I have a rectangular box with a length, width, and height, then these can be put into a single tuple. Box 1 here has a length 2, a width 2, and a height 2, whereas box 2 has a length 3, a width 0.8, and a height of 1. And I can store those so that each of box 1 and box 2 has its dimensions stored in a single container, a tuple. I've got box 1 with its length, width, and height, and box 2 with its length, width, and height. Here's another example. A playing card has a value and a suit, so we can represent a card as a tuple. Here I've got card as a tuple with ace as the card value and spades as the card suit. What's interesting about this example is I may want to store more than one card because I might have a poker hand. Here I've got a six-card poker hand. So what I do is I create a list of tuples. The hand is a list. I can tell because there are these square brackets here. And within the list, I have six tuples, each tuple representing one of the cards in the hand. What we're seeing here is an example of a compound data structure. In this example, I'm combining lists and tuples to create a list of tuples. And combining two different data structures in this way is called a compound data structure. This is something we'll see more and more as we proceed through this quarter.