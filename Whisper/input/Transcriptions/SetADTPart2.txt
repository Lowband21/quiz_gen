 I switched to VS Code and now I'm going to do a little demo showing how to use ArraySet. The first thing I'm going to do is import it. Now I have implemented this. I'm not showing it to you because I'm going to show you the implementation in the next video. But I did already implement it and I want to clarify the naming convention here that set is the ADT that we're implementing and we're using an array to do the implementation. Now since the size of the set is unknown, naturally we're going to need a dynamic array because it's going to have to grow as needed. We could use the dynamic array class that we created earlier this quarter, but instead we're going to use PythonList because PythonList already is a dynamic array. So the first thing I'm going to do to demo this is to create a set by instantiating an object of type ArraySet. This of course calls the constructor that we just wrote. I'll demo using the add method. And I did implement a string method in my ArraySet. So if I do a print here, I'm going to see that I've got three elements in my ArraySet. And these might represent courses that you would be enrolled in. Let me show you another thing, which is I could add a couple more elements here. And then I want to show you discard because if I have five elements in my set and I call discard on one of those set elements, if I print the set, I'm just going to have the four elements in it with the one that I discarded no longer in there. And notice something else, which is if I call add with an element that I've already added, that set does not get added twice. Oopsie. It was a new one, but I'm adding now the same one. And you'll notice that that element doesn't get added twice because it's a set and there are no duplicates in a set. Another thing that I'd like to demo is the contains method. Remember that that is a method that returns a boolean that tells you whether or not a particular element is in a set. So this takes the value true or false, and I'll just output that to show that I should get the value true. If, on the other hand, I call contains with this element that's not in the set, so I'll try arts 1250, which I deleted, I discarded from the set. So that should return false. Another thing I'd like to demo is how to use the union, intersect, and difference functions to create new sets. So I'm now creating a second set that I'll call test set T, and it is an array set that has three elements in it. I've got two sets now. Test set S has four elements and test set T has three elements. I'm going to create a new set by taking test set S and unioning it with test set T. When I print that, I will not have seven elements because one of the elements in the set was an overlap. So notice that when I combine the two sets with a union, I get just one copy of each of the elements. Similarly, I could do an intersection, and the intersection will just have one element because the only elements in both sets is this one value, come 1353. And then the last thing that I'll show you is what I get if I do the difference function. Difference means set minus. It means everything that's in test set S, but take away what's in test set T. And you'll notice that there's only an overlap of one course, which is comp 1353. So this test three will end up having all the original elements in test S, but with comp 1353 removed because that was in the overlap. So this shows you just a short demo showing how the set interface works.