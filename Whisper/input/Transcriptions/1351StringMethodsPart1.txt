 Let's talk a little bit more about strings. In Python, the string type has many built-in methods for doing what amounts to computation on text. For example, we can determine if a string is all lowercase using the following code. The first line creates a variable, a string variable called quote, and stores in it the sentence these are not the droids you're looking for. The next line calls the isLower method using the string stored in quote, and that method returns either a true or a false, depending on whether what's in the string is all lowercase or not. If true is returned, then I print all lowercase. If false is returned, I print not all lowercase. And what you just saw is an example of how to call a method. Remember that when we create a regular function, we call or invoke that function just by saying the name of the function with an open and closed parentheses. But methods are invoked by using the name of the variable, dot, the name of the method. And that's what we see up here. Quote is the string that we want to use, and then we say dot, and the name of the method means call the isLower method on the string stored in quote. Another example is the lower method, which actually converts the string to all lowercase. So every uppercase letter will get switched to lowercase, and the result is returned, and we can store that back in the variable. I'll show a demo of that in a second. And then, not surprisingly, there are analogous methods for uppercase. Let me do a demo of that code. Here's the code that I showed you. And notice we expect it to output not all lowercase because, in fact, there's a capital T here. So when I run it, it says not all lowercase. If I change the capital T to lowercase t, then it says all lowercase. The other method that I told you about was quote.lower, and I'm going to make a mistake here. If I run this program, it still outputs these are not the droids you are looking for. First of all, I was supposed to change this back to uppercase. When I run it, it says these are not the droids you're looking for, and the string has not been modified. And the reason it hasn't been modified is quote.lower returns a new string, and if I want to save that, I have to store the value that got returned back in some variable. So this time, the value in the string quote did get changed. Now I'd like to talk to you a little bit about documentation. There's lots of documentation available, which is important because there's no way you're going to be able to memorize all of these methods. We look them up online when we need them. There's official documentation, and there's many tutorials, and I've given the links here, but there's no way you're going to remember those links, and you don't have them bookmarked. So let me show you how to do the search. I'm going to search for string methods in Python. A lot of results come up. The official documentation is stored at docs.python.org. If I click on that, I can scroll down to string methods because this particular page has all the built-in methods, all the built-in types. If I scroll down to string methods, here are all the string methods available. And if I scroll down to, let's see, isLower, I find the information here, and it says, like we expected, return true if all cased characters, that means letters mostly, if all the case characters are lowercase, and there is at least one cased character, false otherwise. So there's some information in this documentation that I didn't think of before, which is what if there are numbers or symbols, and what if there are no letters at all? So I'll just do a little test on that. If I say these are not the two droids you are looking for, this still works properly. It's not all lowercase because of capital T, but if I remove the capital T, it's still it's now all lowercase because the two just simply gets ignored. Unless the string is entirely symbols, in which case this counts as not all lowercase because there aren't any lowercase letters in there at all. So the documentation pointed out some things that we didn't think of before looking at it. So let me do another search. This time I'm going to look not for the official documentation, but I notice there are multiple tutorials here, and I've looked at all of these four that you see, and this one happened to be the best. I don't know if this particular company always has the best documentation, but I thought this one was pretty good because it gives a list of all of the methods that are available, and they're clickable. So right here I could go to is lower, and this is the documentation for it. There's an example and the definition of usage. If you read this in detail, you'll notice that it actually doesn't have as good detail as the official documentation because it doesn't say anything about the case where all of the characters in the string are not letters. So that's why using the official documentation can be a little bit more thorough. Let me show you another example here and ask you a question. Suppose you've asked the user for the name of a file and you've stored the response in a variable called file name. Now you want to check that the name refers to a text file, meaning that the extension is .txt. What string method might be useful and how would you use that method? Write some code that would use it to find out the thing that you're trying to find out. So please pause the video here and when you come back I'll give the solution. Okay, so the solution here is I'm going to go back to the documentation and look through all the names of the methods and see if I can find something useful. And I did. This endsWith method returns true if the string ends with a specified value that's passed as a parameter. I'm going to click on that and it shows you a sample of how to use it. txt.endsWith a period. This code is testing to see if the string ends with a period. That's not exactly what I wanted to do. I wanted to test to see if the code ended in a .txt. So I've got the code here. You can pause again to read this in detail. I've got the input from the user. I'm seeing if the file name they entered .endsWith .txt and I output if they type in an invalid name. Now I'm going to run this code but what I have up here I don't really want anymore. That was just a demo. So I want to turn it all into a comment. And there's a couple ways to do that in VS Code. On a Mac it's Command-K, Command-C. On Windows it's Control-K, Control-C. There's other ways to do it as well but I just wanted to show you this because it's really useful to undo it Control-K, Control-U or Command-K, Command-U on a Mac. And that can be a useful thing to comment and uncomment code. So now I'm just going to run this code here that tests if a file ends with a .txt. So I'm going to say myImage.jpg and I get the invalid file name error which I was expecting from my code. And if I run it again and I say myText.txt then I get no error message. So this was my way of checking the ending. But the important thing about this example wasn't that you know the ends with command but rather that you get some practice with looking up the documentation and finding the helpful methods that you want to use.