 Let's look at a few more features of lists in Python. One thing that Python offers is negative index values. Here is an example of a list, and the regular indexing that you've already learned about where the index for the first position is zero, and then proceeding up to the last index, which index value is always one less than the number of elements in the list. But Python offers another way, which is to use negative indexes. Right here, negative one refers to the last element in the list, and negative two, the second to last, and so on. For example, scores at negative one has the value 91 that you see here, and scores at negative two has the value 81 that you see in the second to last element. To access the last element of a list, you can either use scores at length of scores, which is five in the above example minus one, and this uses the positive index values. But you can also say scores at negative one to indicate the last element in the list. Another feature that Python offers is slicing of lists, and slicing is a way to extract a sub-list from a list. Here's an image of the previous example with both the positive and the negative indices. Slicing, for example, if I say scores from zero to three, that gives a slice of the list starting at index zero, and going up to but not including index three. That expression scores from zero to three gives a new list, and it is made up of just part of the original list. In this case, highlighted is showing you which part. Now, if you admit the first number from the slice, it's assumed to be zero. You can just say scores up to but not including three, and that gives the same slice that's highlighted above. As another example, the slice scores from one to five gives a sub-list with indices one up to but not including five. It's a little bit strange here to say this five, because five isn't even a valid index in the list. It's much more common for people to say scores from one and then all the way up. That means from index one going all the way to the end of the list, and so that's highlighted right here. A last useful feature of lists in Python is list membership. You can determine whether or not a value shows up in a list by using the Python in operator and the not in operator, and these are called membership operators. So looking at the example of the previous list, the expression 93 in scores, if you look at this list, there's 93, so that expression evaluates to true. On the other hand, 93 not in scores evaluates to false, because 93 is an element of the list. 20 in scores, on the other hand, will evaluate to false, because 20 is not one of the elements in the list, and 20 not in scores evaluates to true. Let me show you some examples in action, and I'll switch right now to VS Code. Here I am in VS Code, and you can see that I've created a list named month names, and in it are the 12 names of the months of the year. So just practicing what we've seen before, if I say month names at zero, that means the first element of the list, so that should output January. Month names at four, it's not the fourth month, it's the month with the fourth index, sorry, with index four, so zero, one, two, three, four, that should output May. Month names at 11 is the last element, so that line should output December, and month names at negative one also means the last element in the list, so that should also output December. Let's run it and confirm that works. Okay, so now let's do a little bit of practice with slicing. Here's the first example. The first half of that list would be month names from the implied zero up to but not including six, so index zero, one, two, three, four, and that should output January up through June. And there it is, output is a list, so you can see that the slice returns another list variable that is not the complete original list. On the other hand, if I want to see the second half of the names of the year, I can create a slice that goes from six up to the end, and when I run this, that's the second half of the names. Here's an example showing the beginning and end, so autumn, maybe it's not technically exact, but to me autumn is September, October, November, so I've taken in indices eight through 11 but not including 11, so that should give me September, October, November. Run that and confirm that that slice gives us what we want. And now let me do a demo of the membership operators. So let's say is December in autumn, and that should return a false. And how about print triember, not in month names. This should return a true because triember is not in the list month names. Here we go, and that is the demo of the special operators for Python lists.