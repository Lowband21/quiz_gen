 I'm going to do a demo for you that shows how we can use the binary tree class to create a tree. I'm showing you the tree that we'll be creating. It's the same one from the previous video. Notice that the root node has contents Pat and it has a left child with contents Chris and a right child with contents Sam. So we'll get that part going first. I've done an import statement. I'm importing both the binary tree class and the tree node class that are implemented in the file binary tree dot py. I haven't shown you that implementation yet. I've written it, but I'm not showing it because I'll do the implementation in the next video. The first thing I'm going to do is to is create an object of type binary tree. This line, of course, calls the constructor in the binary tree class, and I'm saving a reference to it, calling it my tree. The next thing I'm going to do is create a root node, and there's a method called add root in that binary tree class. And I want the contents to be Pat. That does create a tree that now has one node, namely the root node. And the next thing I'd like to do is add a left and right child to that node. However, I don't have that node that got created stored in this in a way that this code can access. And so the add root method in binary tree actually will return a tree node, which we can save. That allows us to interact with the tree using its nodes. So the next thing I'm going to do is call my tree dot add left. That means add a left child. And I need to tell it which node I'm adding the left child to and what the contents of that new node are. Similarly, I'll call my tree dot add right to the node Pat, and the contents here are Sam. And again, I'm going to have to save both of these nodes that got created. And so I'll save them in a reference to a tree node. So the code that I've written right now is showing you these first three nodes created. And please pause the video and write the four lines of code that will create the last four nodes in this tree. So here's the code that does that. I've got four lines of code. The first one says my tree dot add left to the node Chris, a new node with the contents Jordan. And this time I actually didn't save the node that got returned because I don't need to add any children to Jordan. So it turns out I didn't need it. Same thing for this right child, Casey. I did save Charlie the node that got created when I called my tree dot add right to the node Sam with the contents Charlie. And same with Drew. So at this point, I've now created this tree with these seven nodes. Now I'd like to see it. I did implement a string method in the binary tree. And I'll run this now so you can see that it actually does what's called a pretty print of the tree. I started the root node and then for each of its children, I use a tab to indent to show that it's at level one of the tree. And then I print the children of that node and they're indented yet another level. So this way of printing actually shows you the tree. It almost looks like the tree is drawn on its side with the root node here. The next thing I'd like to show you is some experiments with the other methods in the node class that calculate the depth and the height. So I'm going to paste a couple lines of code here that tell me the depth of the node Pat and the height of the node Pat. And if you look at the tree, pause the video and make sure you know what the answers will be for the depth and height of that node. And I'll run that now. The depth of Pat is zero because it's the root and the height is three because the maximum depth of this node's descendants is three. Drew has depth three. I can do the same thing for Drew. I'm outputting the depth and the height for the node Drew. Why don't you look at that tree and see what you think the answer is going to be? Pause the video. The depth of node Drew is three and the height is zero. The depth is one, two, three, and the height is zero. And then the last method that I just want to demo for you is the height of the tree itself. And this is a method within the tree, the binary tree class. So I'm going to call myTree.TreeHeight and then output it. Make sure you know what that's going to be before you continue the video. And the tree height is three. So that was a demo of how to create trees. And then in the next video, I'll implement several of the methods in the binary tree class.