 Lists are a critically important data structure in Python. Let's learn why and how to use them. Here's a line of code that creates a variable to store a single quiz score, score equals 92. And we've seen that we visualize how these variables are stored in memory in the picture shown. Now what if we had five quiz scores? We could create five variables and store the values into each variable, but it's inefficient to do so both from a programming standpoint and also it's inflexible because if I need to add one more quiz score, I need to add another variable and rewrite the program. So instead, lists give us a way to store multiple values in one variable and shows us how to access them in an organized way. Here's one way to create a list. The line of code shown creates a list of quiz scores with five values. Scores equals open square bracket, then the five numbers comma separated and close square bracket. Square brackets are how in Python we indicate a list. Our visualization of what this list looks like in memory is multiple variables connected together. We can also sometimes visualize these lists vertically. These are just our mental models, so it's whatever is convenient at the time. You can print the entire contents of a list with the line print scores. The output is shown. The output has the square brackets that indicate the type of the variable and the values stored are listed comma separated. The len function tells us how many elements are in the list. So just type len and then in parentheses, the parameter is the name of your list, and that function will return the number of elements that are currently stored in the list. Now, how do we access the individual elements in the list? A list is an ordered sequence of variables, and the positions are numbered starting at zero, and these position numbers are an index. Here's an image of the list in memory. Index zero is always the first element in the list, and the positions in the list are numbered from there. So here my list has five elements, so the list in the Cs go from zero to four. Now we put the index in square brackets to access the variable stored at that position in the list. So here, for example, the indices are zero, one, two, three, four. When I say scores at zero, what that is referring to is the contents of the list at position zero. Scores at one, scores at two, scores at three, scores at four. Notice that we now really are talking about two different numbers. The zero, one, two, three, four that we're putting inside the square brackets just indicate the position, whereas scores at that index means the value that is stored in that position. So for example, print scores at three outputs 81 to the terminal, because scores at three refers to the contents at position zero, one, two, three of the list. Lists are mutable, which means changeable, so we can modify the contents of the list using an index. Look at this line of code, scores at three equals 85. That takes the number 85 and stores it in this assignment statement in the variable scores at three, which means position three, index three of the list. So if here is an image of the list, when I execute the line scores at three equals 85, this number 81 gets updated to 85. There are more common ways to create lists. One is to start with an empty list. Here I have scores equals open square bracket, close square bracket. That means an empty list. Then I will have repeated lines of code that append to the end of the existing list. Tracing through this code, the line scores equals an empty list has a memory diagram with just the name of the variable. I go to the next line of code, scores.append creates a new value and stores the value 92 in it, and it puts it at the end of the list. Next, scores.append 87 creates a new variable and stores the value 87 and appends it to the end of the list, and so on. Each line of code adds a new element to the end of the list. This is our visual model of what's happening. Now, this is not very realistic because it's unlikely that you would know what these five values were to put them into a program. It's more likely that we would try to get that information either from the user at the keyboard or that we would pull it out of a file that's stored on the file system. The loop shown here demonstrates how to get the input from the user in a loop. So I create an empty list called scores, and then for i in range 5, that means repeat the next two lines five times, get the value from the user, and then call scores.append with the score that they input. Now, if the contents of the list follow a formula, then we can use a for loop to initialize the contents. Here's an example. Suppose the contents below are the list we're trying to create. 83, 84, 85, 86, 87. We notice a pattern and that the value stored in the list at each of those index positions is always 83 more than the index itself. So 0 plus 83 is 83, 1 plus 83 is 84, 2 plus 83 is 85, and so on. So what that means is that we want to store the value 83 plus i into the ith index of this list. So the line 83 plus i is stored in scores at i is the line of code that we want to execute for all values of the index i. So here's the code. Create scores as an empty list, then for i in range of 5, store 83 plus i into the ith position of scores. I'll demonstrate all these ideas to you in the next video.