 I'm showing you some code that draws a house onto a DUDraw canvas. So let me just go over a little bit. This upper segment here is the doc string that documents the program. I've got an import statement. The main program is down here. It opens a DUDraw window that's 400 by 400 pixels, sets the background to light gray, changes the scale to go from 0 to 5, and then calls or invokes this draw house function, which is defined up here. So the draw house function has no return value and no parameters. Here's the documentation that shows that. And then the code draws a green house with a brown roof and a red door. Let me run it. Notice that the draw house method draws the house in a 0 to 1, 0 to 1 size square. And the entire canvas goes from 0 to 5 and 0 to 5. What I want to do is show you how you can shift this image, and I'll move it over two units and up three units. In order to do that, the simplest way would be, every time I have an X and Y position in my method that's drawing the house, I'm simply going to add 2 to the X positions. So this becomes 2 plus 0.5. And of course you can write 2.5 there if you want. And then I'll have a 3 plus 0.3 for the Y position. But I'm not going to change these second two values, because remember that for a filled rectangle, these last two parameters are the size. And I don't want to change the size right now. I just want to shift the position of the lower left corner. I'll do the same thing here for the triangle. But triangle, the filled triangle method is a little different, because here every pair of numbers is a position. So for every X position I'll add 2, and for every Y position I'll add 3. Finally, this filled rectangle here, I'll move it over two in the X position and up three in the Y position. And these last two values are sizes, so I won't change those. When I run this again, I have the same house, but redrawn with the lower left hand corner no longer at the origin 0, 0, but moved over two and up three. Now this is great, except that it's not very flexible, because now if I want to change it to yet a new lower left hand corner position, I would have to change the code in this function all over again. So I'm going to return back to the original version. I've changed it back. I'll confirm that by running it. And this time I'm going to do something different. And it's something you haven't seen before, but it's wonderfully flexible and very powerful. This time, instead of just putting the 2 and the 3 buried right here in the code, I'm going to pass as parameters the X position and the Y position, the new Y position of the lower left hand corner. And I'm also going to indicate here that the type of those two values are floats. Now, instead of adding 2 to the left to the X position of this first rectangle, I'm going to add X position. Then for the Y positions, I'll add Y position. Same thing for the triangle. It's going to be X position plus Y position plus. And I have to do that for every one, for the triangle, every one of these values is in position. So I'm going to shift it. Shift it by adding and shift it. And then finally for the rectangle, I need to add the X position to the X position of the rectangle. And same for Y. But these last two are sizes. So now this function, draw house, actually has parameters, which it didn't before. And when I invoke or call that function or use that command, I now need to tell it the values. So 2 is going to be the X position and 3 is going to be the Y position. And let me run it. And I can error here on line 19. I didn't type this carefully. I forgot my plus. Let me try that again. There we go. There's my house shifted by position 2, 3. I did skip something here, which is the documentation. I've just added parameters to this function. So I'm going to change this comment to say that X position is the left edge of the image. And the type is a float. And then the Y position is the bottom edge of the image. I'll say shifted image. And the type is a float. And now I've documented, I've put in my doc string, I've put the information about what those parameters are so that anyone that wants to use this method can easily see what the meaning of these two parameters that are passed is. The reason this is such a powerful thing is that I can now invoke this function again, use the command multiple times, and create many houses all shifted to a different position. And when I run the program now, it was so easy to add extra instances of these houses. The idea of passing parameters to a function is extremely powerful, extremely useful, and we will be doing it all quarter long.