 I'm going to show you some more string methods. There are so many, but I've picked out seven that I think are pretty useful. When you're trying to solve a problem involving strings, there may be useful methods rather than coding it yourself. So never be afraid to look at the documentation. You might find something useful that makes your life easier. So here are some examples. String.index with a passed parameter sub, sub for substring, finds and returns the index of the first location where the string sub is found in string. Let's try that. Here's a string. Poem is. Roses are red. Violets are blue. Let's output Poem.index, red. So this is saying, where's the first index where red appears? Should be 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10. And then I'm outputting it. Let me run this and make sure that works. Yes, 10. Now, there's something a little funny because if I say Poem.index with the word green, green doesn't appear at all in this string. So what will Poem.index do? The failure mode for this method is to crash with a value error. In other words, an exception gets thrown and the program crashes. And we have not learned how to handle exceptions yet. And we will learn that later. So in the meantime, maybe you don't want to use the method.index because it raises an exception. If sub is not found at all. The alternative is string.find, which acts a lot like the index method. But if the string is not found at all, it returns a negative 1 instead of raising an exception. So what I'm going to do is go back here to the code and change the index to find. And let's see that this returns the 10 when it finds the index and negative 1 if that string does not appear at all. You can also use the membership operators in and not in like we saw with lists. They work for strings as well. And you can do that to determine whether a substring is found within a string. For example, them in chrysanthemum is a Boolean expression that's either true or false, depending on whether this string, them, shows up as a substring in the second string chrysanthemum. And it does. T-H-E-M right here. So that Boolean expression has the value true. The example for not in is I is not in the string team. So that has the value true as well. Let me show you a few more methods that I think you'll find useful. String.count, if you pass a substring, returns the number of times that that substring appears in the string. String.replace old new takes the two parameters and everywhere that old appears in the string gets replaced with new. A copy of the string with those replacements is returned. String.rstrip, R stands for write, returns a string that has all the white space at the end of the string removed. And string.split breaks the string into a list of substrings. These are all useful methods that I'll demo for you. Let's try count first. So let me do poem.count r. So let's see how many times r shows up in that string. And then I'm going to take the result and store it in a variable called count. Then I'm going to print count. And hopefully you've gone back to this string poem and checked that the answer we're hoping that gets output is two. Let me comment out this old example. So if I run this, yes, too, because the word r shows up twice. But if I use the word night, then the output is zero because the word night doesn't show up even once in that original string. There are a couple of other ways to use the count method. You can pass a start and end value that allows you to count the occurrences just in a substring of the original string. And you can look up in the documentation how that would work. Let's try the replace method next. What if I take my poem string and I replace in it all occurrences of r with the word shine? Now, as we talked about here, if I print the string poem here, it's not going to be changed at all because the return value from this replace method never got stored. So let me store it. And I can store it back in the same variable if I don't need the original any longer. And here I see the replacement roses shine red, violence shine blue. Now, replace has another thing that you can do, which is if you pass a third parameter that says the number of occurrences you want to replace, you don't have to replace them all. And this time just the first r got replaced with shine. So that shows how you use the method replace. Let's now try the rstrip command. Here's a movie quote. What is the airspeed velocity of an unladen swallow? And notice that there's a couple of spaces at the end. So let's see if we can remove those spaces from the end of that string. We call the rstrip method movie quote dot rstrip, and then we save the result back into the variable and then we can print it. Let me run this and you'll see that I have what's the airspeed velocity of an unladen swallow, and there are two spaces here, but I can't see them. So I can't actually tell that the method did its job. So instead of printing the quote itself, I'm going to print its length and I'm going to print its length before and after. So this time when I run it, it had 54 characters before and 52 characters after. Now I want to show you something in the documentation, because if I look in the documentation for rstrip, this is the tutorial version of the documentation, and here it tells you it removes any trailing characters, characters at the end of the string, space is the default trailing character. And actually, this is not completely accurate. And this is why you might want to have a look at the official documentation, even though it's a little bit less convenient, because this documentation tells us that that you can either strip a specified character, so you can say which characters you want to strip, which might not be spaces. If you don't specify, if omitted or none, the chars argument defaults to removing whitespace. So it's not just spaces, it's all whitespace. So for example, if I put a backslash n and a backslash t, this is a new line and a tab, those also get removed. So you can see this time it went from 56 to 52. And these are the only whitespace characters that you know, but there actually are some other ones. There's form feed, carriage return and vertical tabs, and those will also get removed using the rstrip method. This is actually an important thing to know, because later when we read from files in Python, meaning we'll write Python programs that open a file from your file system, and when we read out of there, the lines that we read will have the new line character, the backslash n at the end of the line. So removing them from the end of the line turns out to be a typical thing that we have to do in Python. The last string method that I want to demonstrate for you is the split command. So what I'm going to do here, first I'm going to remove this whitespace from the end of that quote, and let me get rid of this previous demo. What I want to do is call movieQuote.split. And what movieQuote.split does is it looks for spaces in your string and it uses those as the breakpoints, and it creates a list. So right here, I'm going to store the return value of this movieQuote.split into a variable called words. And words is not a string. It's a list of strings. So I'm going to print words here so you can see how that works. And here's the list. It split the original string that I gave into a list of substrings broken by the space. Now, if you don't like space to be the dividing character, you can change what that delimiter is. You can use a new line or a comma or whatever else you might want instead of a space. And looking in the documentation will tell you how to do that.