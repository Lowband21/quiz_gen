 In order to bend or understand how a nested for loop works, let's trace the code from the previous video. The first line of code outputs to the user how many rows of stars do you want and asks for them to enter an answer. When they enter an answer, this assignment statement says, store whatever they entered into a variable called numRows. So a variable called numRows is created. It's of type int because the number they entered is converted to an int type. And for the purposes of this tracing, let's suppose that they entered a 2. Next line is similar. How many columns of stars do you want is output to the terminal. The user enters a value and this assignment statement stores into the variable numCalls the value converted to an int that they entered. And let's suppose for the purpose of this video that they entered a 3. Now we move to the for loop for i in range numRows. numRows has the value 2, so the meaning of range of numRows is a sequence. The sequence starts at 0 and ends before the value that they entered. So the sequence is 0, 1. The loop variable is named i, so a variable is created in memory, and the first value of the sequence is stored in i. Now we move to the next line of code, and this entire block of code will run, will execute, before we return back to the outer for loop to get the next value of i. So now inside the outer for loop is a for loop of its own, and we interpret it the same way. range numCall is a sequence that starts at 0 and goes up 2, but not including the value of numCalls, which is 3. So the numbers in the sequence are 0, 1, and 2. The loop variable is called j, so I create a new location in memory and store the first value in the sequence of the range in the variable j. Now I enter the block that's inside the inner for loop, and it says to print a star, and there's no new line. So the next thing that gets output will go right at this position, not on the next line. So now I'm done with that inner block of the inner for loop. So I go back to the inner for loop for j, and I move to the next value in the sequence and update the value stored in j. Executing the block that goes with that for loop, I output another star. Returning back to the inner for loop, I move to the next element in the sequence and update the value of j, and execute the print. Now I have exhausted all the elements in this range object, and so that means I'm done with the inner for loop, and I'm going to move on to the next line. But first notice that this block of memory is no longer relevant because I've completed that for loop. So this is now gone from memory. So I move to this line that prints, and the effect of this is to move the point that I'm outputting to the next line in the terminal, so the next output will happen on the next line. And now I'm done with the for loop on the inside, and so I go back to the next occurrence of this outer for loop. And that means update the value of i to the next value in its sequence, and I will repeat. So I go to the inner for loop now. The range numCalls has the meaning a sequence starting at 0 and going up to and not including the value of numCalls, which is 3. My loop variable gets created, and the first value in the sequence is entered into it. I print a star, move back to the for loop, which updates me to the next element in the sequence and stores that in the value j. Output a star, go back to the for loop, update the value stored in the variable j, output a star. The print statement just moves me to the next line. Now I've completed this inner for loop, so again, these values are gone. And when I go back to the outer for loop, I see that I've exhausted all of the elements in that sequence, and so the values stored in memory for that for loop are also released. And that is the end of the program.