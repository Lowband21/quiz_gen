 We're continuing our study of trees and we've gotten through much of this vocabulary. We're just working now on node depth, tree height, node height, branching factor, and binary tree. So please notice there's a difference between node depth and node height, and we'll get to that. But pay attention because the distinction is important. So let's start with node depth. The depth of the node is the number of its ancestors, not including itself. So in the example below, let's find the depth of the node overseas. Well, here's a path from overseas to the root node. And on this path, we see that there are one, two, three ancestors. So that means that the depth of the node overseas is three. The depth of the root node is zero. It has no ancestors. Now let's talk about the opposite concept, tree height. The height of a tree is the maximum depth of all of its nodes. So in the example below, the drawing of this tree is arranged so that the depth one nodes are all at the same horizontal line. Node two, depth two nodes, depth three nodes, and so on. So it's pretty easy to see by inspection in this tree because of the way that it's drawn that it has a maximum depth of four. Each of these Africa, Europe, Asia, and Australia have a depth of four because each has one, two, three, four ancestors. You could ask yourself, how would we compute depth of nodes and tree height within a program? This is something that we'll be looking at in a later class. There's special cases for tree height. If a tree has just one node, namely the root node, we'll say that that tree has height zero. If a tree is empty, we'll say that its height is negative one. These definitions will make recursive computation of tree height easier when we get to it. Now let's look at node height. The height of a node is just the height of the subtree rooted at that node. For example, let's find the height of each of these nodes, manufacturing, sales, and purchasing. First, let's look at manufacturing. This is the subtree rooted at the node manufacturing. The definition of the height of that subtree, which is the same as the height of this node, is the maximum depth of each of its nodes. Each of these nodes has a depth of one because each of these three nodes has just one ancestor within the subtree rooted at the manufacturing node. So the height of that tree is one. How about sales? We're asking for the height of the tree rooted at sales. You should pause the video and see if you can figure out the answer to this question. The height is three because the node with the maximum depth is down here. Africa, Europe, Asia, and Australia each have depth three because they have one, two, three ancestors within the subtree rooted at sales. And finally, purchasing, pause the video and make sure you can answer this, has a height of zero. Because looking at this as a tree in its own right, it only has a root node, and then a tree with just one node has a height of zero. Finally, let's look at branching factor. The branching factor of a tree is the maximum number of children among all the nodes. So if you look here at the root node, it has four children. And that max is again reached here at overseas, which has four children. So the branching factor of this tree is four. Last idea here is a binary tree. A binary tree is an ordered tree, meaning there's a difference between the left nodes and the right nodes that are children of any given node. And a binary tree has a maximum of two children per node. So its branching factor is at most two. And we identify the child nodes as the left child and the right child. We can do that because there are only MOS2. There are many applications for binary trees. Here's an example of a binary tree. And then here's another example, just showing that a binary tree doesn't necessarily have to have two children at every node. It's that it has a maximum of two. So that's it for the definitions of all the important terms. And in the next video you'll see a bunch of applications of trees.