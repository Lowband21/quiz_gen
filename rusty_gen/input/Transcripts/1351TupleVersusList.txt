 Let's talk about the comparison between the Python data structure tuple and the Python data structure list. They're the same in some ways, but differ in others. First, they're both ordered, and that means that both tuples and lists have contents that are accessible using an index. For both tuples and lists, you can iterate through the elements in order, and you can do this either by iterating over the index or iterating over the contents. Both tuples and lists can be sliced. Here are some differences. Lists are defined using square brackets, while tuples use parentheses. But the most important difference between tuples and lists is that tuples are immutable, unchangeable, while lists are mutable. So this gives us one reason not to use a tuple. If you expect your data to change, you shouldn't be using a tuple. Since tuples are immutable, once you create a tuple, you cannot change the values of the elements nor add or remove elements without creating an entirely new tuple. On the other hand, you should use a tuple in the following situations. Use tuples when you need your data to be immutable. One example we'll see later when we study the Python data structure dictionaries. Keys for dictionaries have to be immutable, so you could use a tuple but not a list in that situation. If you have a function that you want to return two values, an efficient way to do it is to take the two values and put them into a tuple. Then you'll just return one object, a tuple, that has the two values you want to return as elements. Another time to use a data is, excuse me, another time to use a tuple is when your data is sure not to change ever during the running of the program. And in that case, using a tuple helps you avoid bugs by accidentally modifying the contents. The program will result in an error if you do that. Now when it's possible to use either lists or tuples, it's more common to use tuples when you have heterogeneous data types, meaning the elements within the tuples vary in their type, and use lists when you have homogeneous data types, meaning all the elements in the list are the same type. This is not a hard and fast rule, just a typical usage case. Finally, it's more efficient, meaning faster, to iterate through a tuple than it is through a list. So if your program is running too slowly, switching to tuples might possibly improve the performance.