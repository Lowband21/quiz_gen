 I'm going to demonstrate for you now some of the ideas from the previous video. The code that I'm showing you is a loop that inputs information from the user and stores what they enter into a list. If you'd like to, pause the video right now and have a good look at it before I start talking about it. On line 2, I'm creating a list variable called names, and I'm storing in that variable names an empty list. Lists start and end with square brackets, and there's nothing in that, so that creates an empty list. On the next line, I prompt the user to input the names of their friends, and I store what they type in a variable called friend. This variable will store a string value. Then I enter a loop, and as long as what they typed isn't equal to the word done, I'll take their input and I will put it at the end of the names list. And then I will ask them for a new name. This loop will be repeated until they enter the word done. I'd like now to output whatever the list of names that they entered in, just to check that everything's going right. So I'm going to run this code. It says input the name of your friends. So I'm going to input a bunch of names, Phoebe, Ross, Rachel, Monica, Joey, and Chandler. And when I'm done, I'm going to say done. At this point, I've completed the loop, and on line 8 of the code, print the names, I see an output of the list that got created. Notice that when lists are output to the terminal, they begin and end with a square bracket, and the elements in the list are comma separated. Let me practice a couple of other things. Remember that to find the length of a list, I can use the len function. Len of names in the previous entry should be 6, but it depends on what they type. So I'm just going to output this and see if this works. And then I want to practice a little more. If I want the first name that they enter, I say names at zero. Lists are indexed with a zero as the starting point always. And then the last element in the list, the index isn't the same as the number of entries. Let's suppose they enter three names. Then the indices are zero, one, and two. So to get the last entry in the list, I take the length of the list and subtract one. And notice that I've been careful to put the minus one within the square brackets. So that's how I always access the last element of a list. Let me run this. This time, I'll just enter three names, Phoebe, Monica, Rachel, and then I'm done. And notice it tells me on line eight that the length of the list is three. And the first element entered was Phoebe, and the last element entered was Rachel. Now, let's suppose that I want to output the elements of the list, but I don't want to do it in the format that comes built into print. I don't want to have the open square brackets and the close square bracket. So what I'm going to do is output to the user the names of your friends are. And now I want to traverse the list and see one by one what the names are and output them one by one. So there's a couple ways to write a for loop to traverse a list. One way is using an index based loop. This is the familiar for loop that you've already seen for i in range. And now we need to think about what range should be. Remember that range starts at zero and ends one less than the number that I put in these parentheses. So if I put len of names here, I'll have range going from zero up to one less than the number of names, which are is exactly the indices that I want. Then inside that loop, I can just output names that i. This should traverse the loop and output all of the names. So let me first input the names. I'll do three again. So the length of my list is three. Then I'm done. And the names of your friends are there's the list. So I traversed the list as it was entered. Python offers another type of for loop to traverse a list. And this type of for loop is not automatically built into every language, but Python has it. So what I'm going to do is change this code. And I'll put a comment here that says instead that there's another way to traverse the list using a loop that iterates over the sequence instead of using an index. The way this for loop works is the following. I say for and then I give a variable name. So I'm going to call the variable name friend in names. What this loop does is it repeats for every element in the list names, and that is stored in the variable friend while I'm looping. So I can now just print friend. This gives a quick way so that I don't have to deal with the indexing. Let me show this again to you. I'll enter three names. And the names of your friends are doo doo doo. The for loop itself handles the indexing for you and the variable stores the contents of the list without you having to look at a particular index. It's common in Python to if a list has a plural name to use the singular of that for the name of the variable. And it kind of makes sense for name in names. And this loop traverses so that name will one by one take every single value in the list names. And then I can just do whatever I want with that variable. Two ways to use for loops in Python to traverse lists.