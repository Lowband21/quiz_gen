 Let's look at the important programming concept of two-dimensional lists. We think of regular lists in Python as linear storage of multiple values. For example, I could have a variable called list1d that stores these five values. But sometimes you want to have two-dimensional lists, and in Python this is possible. A two-dimensional list is a matrix or a grid of values. So here I have an example of a variable called list2d that holds the following grid or matrix of values. First, why do we even need 2D lists? Let me give you several examples. Many games require storage of information in two dimensions, and writing a computer program in Python to implement any of the following games would likely use a 2D list. The first is tic-tac-toe. I can have a two-dimensional list, and each of these nine elements would store either an X, an O, or a blank. Another example is chess. I've got a grid where I would store in each of those positions what piece is currently sitting in that position. This is a game you might have seen. It's called Connect Four. I could also store in a 2D list whether I want a yellow or a red checker or none in that position. Battleship is another example. A maze you can store as a 2D grid or matrix or a 2D list of either dark wall or white open space. Candy Crush, Minesweeper, and 2048. These are all examples where a 2D list would be very helpful. Another example is digital images. These can also be stored in 2D lists. For example, here's a painting you might be familiar with. What if I say, just look at this tiny upper left-hand corner of it and blow it up? If this image is stored digitally, it might look like that. Let me again take a tiny little corner and blow it up. When I do that, you can see that actually there are just tiny squares of different colors making up that image. If I go back to the original, the picture that I'm showing you on the left is just this very uppermost corner. These little squares of color are called pixels, which is short for picture elements. What that means is that an image can be stored as a 2D grid or 2D list of colors. In Python, we use 2D lists or a list of lists to implement this. Here's a couple more examples. Sometimes information is just best organized in a grid. Here's one example. I've got some temperature measurements at different times that I've collected from different sensors. Here's another one. I've got a monthly heating bill. I've got different quarters of the year and different apartments. I just have a record of the bills that were paid. I'm sure if you sit down and think about it, you can come up with dozens of other examples like this. How do we create 2D lists in Python? There are multiple ways to do it. One is called a list literal. It's really similar to the way we learned to create regular lists with a list literal. Let's say I've got my average monthly heating bill example, and I want to store it as a list. Here's how we do that. I create a variable called heating bill. You can see because I have these two square brackets, that means that what's inside is a list. But it's a list of three items, each of which is itself a list. You can see that the first row here is a list because it has square brackets and then four numbers. And same for the next and the next row. This heating bill 2D list can be viewed as a list of lists. The first element, heating bill at zero. Remember when I put an index of zero, that means look at the first element in the list. The list starts with this square bracket. The first element is right here, and it itself is a list. Same for heating bill at one, which is the second row. Heating bill index two is the third row, which is itself a list. So a list of lists is one way to create a 2D list. This shows us how we can access individual elements in a 2D list. Here's my list literal. And since heating bill at zero, the first row, is itself a list, remember that I can access each of the individual elements in that list. So heating bill at zero is the whole first row. But to get at the individual elements, heating bill at zero zero is the zeroth index in heating bill at zero. Heating bill at zero one says heating bill at zero, which is the first row, and then access the index one element of that, and so on. Now there is a completely different perspective, which is to say that when you access an element in a 2D list, you have two indices, and the first index gives the row and the second gives the column. So for example, if I say I want to look at heating bill at index zero zero, that first index zero refers to the row, whereas the second index refers to the column. So the two together identify a single element in that 2D list. Heating bill at two three says, look at the two, index two is the row that's shown, the third row, and now I look at the index three column, which is the fourth column, and together those identify a particular element. Here's another example, heating bill at one two. If I were you, I'd pause the video and make sure that I knew exactly how to figure out which element that's identifying. And here's the answer. So one means the second row, and index two means the index two or third column, and so that heating bill at one two is accessing the element that's shown.