 The next data structure that we'll be studying is trees. All the other data structures that we've seen so far, such as lists, multiple types of linked lists, and our own implementation of dynamic array, store data sequentially. This means that the data is stored in a linear order. However, a tree has a different type of relationship, namely hierarchical. I'm showing you an example of a tree that is the organizational chart for a fictitious company. Rather than having a sequential previous and next relationship between the elements in this data structure, instead the relationship is hierarchical. Parent and child. For example, Electronics R Us has four child nodes. And Europe, this node, has parent overseas. Technically, a tree is a set of nodes storing elements such that the nodes have a parent-child relationship, and the following properties must be satisfied. If T is non-empty, then it has a special node called the root of T, and that node has no parent. For example, here, Electronics R Us is the root node. It has no parent. It's the only node that has no parent. Every other node, V of T, other than the root, has a unique parent node, W, and every node with parent W is called a child of W. Here's a couple of special cases. It's possible to have a tree with just one node. In that case, that node has to be the root. It's also possible to have an empty tree. In this case, the tree has none as the root node. One kind of tree is an ordered tree, and in these cases, each node has children that have a meaningful linear ordering. So, for example, here, I've got the nodes representing sections of a book. Book is the parent node. It's broken into four sections, Preface, Part A, Part B, and References, each represented as a node. And these can't be shuffled. Logically, they must be in the order that they're given. Same for every other node. Chapter 1, for example, has sections 1, 1, 1, 2, 1, 3, 1, 4, and you cannot change their ordering. So an ordered tree is a special kind of tree. It's also possible to describe a tree recursively. In this case, we say that an un-entered tree consists of a root node and also a set of children. That set could be empty, but each of those children is viewed as the root node of a subtree. So here, for example, the entire tree has root node electronics or us, but each of its four children can be viewed as the root of a subtree of its own. This first one is a subtree with just one element. Sales is a subtree that, notice it's one node shorter than the original tree, but since I'm looking at this recursively, Sales has two children, so I can look at each of those children as the root of a subtree of their own. International now has three children, each of which can be viewed as the root of its own subtree, and I can recurse in this way to look at each child. The recursive definition is very important. We often think of trees this way, because this perspective lets us implement recursive methods to perform certain computations or to modify the contents of a tree, and algorithms can be quite simpler actually by viewing the tree recursively. One thing that makes learning about trees difficult is their One thing that makes learning about trees difficult is there's a lot of vocabulary. You've already learned the terms tree, parent, child node, root, and root node. Additionally, in this segment you'll be learning sibling, internal node, external node, edge, path, ancestor, descendant, node depth, tree height, node height, branching factor, and binary tree. You might want to get out a piece of paper and take some notes, because you're going to need to know in detail what all of these terms mean. I'll be going over them one by one with examples. So sibling, you probably have some good intuition for. Two nodes that have the same parent are called siblings. In the example below, sales and purchasing both have electronics as us, or us as the parent, so they're siblings. Domestic and TV though, even though they're on the same level of the tree, they don't have the same parent node, so they're not siblings. Another example is sales and overseas, also not siblings, although they do have a descendant-ancestor relationship that we'll talk about shortly. An external node is a node that has no children. External nodes are commonly called leaf nodes or leaves. And a couple of examples, I'll show you in a sec, internal nodes are nodes that do have children. So external and internal are opposite concepts. In the example below, R&D has no children, so it's a leaf node, and it's a leaf node. Domestic has no children, it's a leaf node, as well as Africa. There's more, you can count them and see which nodes are leaf nodes and which nodes are internal nodes. Electronics are us, has four children, so it is an internal node. Sales has children, and overseas has children nodes. So those are all internal. Edge. An edge is a pair of four nodes. Edge. An edge is a pair of nodes such that one is the parent of the other. In the example below, sales and domestic, that ordered pair is an edge because one is the parent and one is the child, and overseas international is another example of an edge. In this diagram, the edges are all represented as the blue segments connecting the nodes. So for example, purchasing and overseas, that pair would not create an edge because there's not an immediate parent-child relationship between them. A path is a sequence of nodes such that any two consecutive nodes in that sequence is an edge. Here's an example. Overseas, international, sales, electronics are us is a path because each pair in that list of nodes is an edge. Another example is TV manufacturing tuner. That's also a path. An ancestor is described as follows. A node U is an ancestor of a node V if it lies on a path connecting V to the root. A descendant is kind of the opposite idea. A node V is a descendant of a node U if U is an ancestor of V. In the example below, sales is an ancestor of domestic. Here's why. Here's a path from domestic to the root, and sales lies on that path. Similarly, sales is an ancestor of Europe because from Europe to the root, that path includes the node sales. So sales is an ancestor of Europe. TV is a descendant of manufacturing because manufacturing is an ancestor. I know that because a path from TV to the root node contains manufacturing. And the more extreme case, electronics are us, is an ancestor of TV because it is on a path. It's the end of the path to the root node because it is the root node. And you might realize if you think about it that the root node is an ancestor of every node in the tree. I'm going to pause here so you can kind of absorb and think about all these definitions and in the next video I'll complete the list of the terms that you need to know.