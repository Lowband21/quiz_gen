 I'm going to show you how to make an animation in Python using duDraw. Let me demo for you the simplest animation that creates the illusion of movement, which is the movement of a circle across the canvas. Here it is. Now I'm going to show you another version, which is a program that runs in slow motion, so you can see how the animation works, how it's created. I start by opening canvas, drawing a gray background and drawing a circle. Then I display that image for a period of time. In this version, the time period is four seconds, because I'm running the animation in super slow motion. Then I clear the screen, redraw the circle in a new position and display again for four seconds. And I repeatedly clear, redraw and display the image again. The length of time of that pause controls how quickly the circle appears to be moving across the canvas. And just by shortening the time I display each image, I speed up the movie. I'll show you again the animation with a shorter display time so you can see that it's the identical program, but the speeding up of the redrawing and displaying creates the illusion of movement. And now I'm going to demo for you how to create this program. I've already inserted the documentation and the import statement. And of course, in duDraw, the first thing that we have to do is create the canvas. So next, I'm imagining that I'm trying to create a circle that's moving across the canvas. So I'm going to create a variable to keep track of the X position of the circle. I'm calling it xCenter and I'm initializing it to 0.1. And this puts the circle in the beginning on the left side of the canvas just touching the edge. I'm going to create another variable for storing the yCenter, although in this particular program, I'm not going to be changing that value since the circle does not move up or down. Next, since I'll be repeatedly clearing the screen, drawing the new image and displaying the image, I'm going to use a while loop to repeat this process. Remember that the structure of a while loop is to have a while, then a continuation condition, followed by a colon. I'm going to do something a little unusual here, which is to intentionally create an infinite loop by putting the boolean value of true as the continuation condition. What this means is that the loop that I'm about to create will be continued indefinitely and nothing within the program will stop it until the user closes the window. Later, we'll improve our animation so that the program gives the user a sensible way to stop the animation besides just closing the window. Now, here we are in the body of the loop, which is the block of code that is going to get repeated. The first thing that I have to do in this loop is to clear the background so that I can redraw a new frame of the animation. I'm going to clear this. This has the effect of erasing the previous frame. I like to use light gray because I think that drawings on top of light gray pop pretty well. Now I need to redraw the circle at my current position using a dudraw filled circle command. Recall that for dudraw.filledCircle, I need the x and y positions at the center of the circle and the radius. Well, the x center and y center variables are storing the center of the circle. Now I'll just have to put a radius, which I'm going to use as 0.1 for a tenth of the size of the canvas. Next, I need to display the image. To do so, I'll use a dudraw.show command. The show command requires a parameter that gives the number of milliseconds that I want to display the image for. I'm going to use 50 milliseconds. 50 milliseconds is 20 frames per second. Now the last thing I have to do within the body of this loop is to prepare for the next frame. To prepare for the next frame, I need to move the circle. To do that, I'm going to take the center and move it by some fixed amount. For this animation, I'll use 0.01, one hundredth of the canvas size. Let me just put in some comments. Clear the previous frame. Draw the next frame of the animation. Display the image that we've created for 50 milliseconds. Which corresponds to 20 frames per second. And that's it for the program. Let me run it. And there we have our animation. I want to show you a couple of things. The first one is, what if I forgot to clear the background? What would happen in this case is each time a new circle gets created, but the old frame does not get cleared. So I end up with just this streak of circles with the old frames still being displayed as part of the animation. So that's why we need to clear the screen. A couple of other improvements that I could make to this program are, first of all, having these mystery numbers hardcoded into a program is not good programming practice, because it makes it difficult for others to understand as well what's going on. So what I'm going to do is create a variable called radius, because this starting position at the X center and the Y center actually are equivalent to the radius of the circle. It's what starts the circle exactly in the lower left side of the canvas. Now the 0.1 here in the duDraw.filledCircle is also the radius. The next mystery number that I have is this 0.01, and that's the amount that I'm moving the circle by at each frame. And you can think of that as a velocity. So I'm going to create another variable called velocity and initialize it to be 0.01. And then I can use that variable to be the value that I'm moving the circle by at each frame. The advantage of this is that later when people read this code, I've automatically documented my thought process. It makes the code easier to debug, modify, and improve. In summary, when I'm making an animation, I have an animation loop. And inside that loop, I always need to clear the background from the previous frame, redraw the image, display the new image, and then update for the next frame. We'll be doing much more of these animations and you will be doing many examples of this yourself.