 You've already seen how to create a 2D list using a list literal. But what if you don't know the exact contents of the 2D list in advance? In that case, you may use a loop to fill the list. So let's try to create the following list, which here is defined in a list literal, but instead I want to create it in a different way using a nested for loop. I'm showing you the code that will do this, and before I go through it line by line and discuss it, I suggest you pause the video and have a look at it yourself and see if you can figure out how to trace the code. So this first line, temperature equals an empty list, is our beginning, and we're creating really the equivalent of the outside brackets in the temperature variable. Now what I want to do is load that list with four lists, each of which has three zeros in it. So I do that within a for loop, and here row takes the values 0, 1, 2, and 3, so that the inside of this loop will get executed four times, each time creating one of the rows in my list. To do that, I start by making my new row be an empty list, and then I'm going to have a for loop here that will be executed three times, column taking the values 0, 1, and 2, and each time I'll be appending a new zero into my new row. So once I execute this for loop three times, new row will have three zeros in it, and then I can append that new row into my temperature variable. So when the outer loop gets executed four times, these four rows will each get put into the list. I'm going to switch to VS Code now to demo for you in the debugger how this list is getting created one step at a time. So I'm in VS Code now, and I've pasted the code that I showed you before, and now I'm going to run it line by line in the debugger. So the first thing that I do is set a break point here on the first line of code, and one way to run the debugger is go up to the run command and select debug Python file. So when I do this, the debug window appears, and no code has been executed yet, but I want you to watch when I execute this first line of code, temperature equals an empty list, that this new temperature variable will appear in the variables section of the debug window. This icon right here is step over, and that executes one full line of code. So I've executed line nine now, and you can see that the variable temperature as an empty list has been created. I'm now going to start stepping through this for loop, and the first time through the loop, row takes the variable zero, and you can see that that variable has appeared in my variable list. And then within that for loop, the next line is to create new row as a variable that stores a new empty list. Now I'm working on the inside for loop, and this loop should get executed three times, where column takes the value zero, one, then two, and each time I will append a zero into that new row. So let's watch that happen. I've executed line 12 for the first time, column takes the value zero, and when I execute line 13, you'll see that that first zero gets stuck into new row. I'm now returning to line 12, checking to see if I need to continue to execute. Yes, because now column takes the value one, and now I append another zero into the new row variable. There it is, two zeros now. I execute that inner for loop for the third time with column equaling two. I append the zero onto the list, and you can see that I'm returning to line 12, but I won't need to be executing it again because column has taken its last value. Now on line 14, I take the new row that I've created, and I'm going to append it onto the end of the temperature list, which means that this new row is going to get stuck into this temperature that is currently empty. So there it is. I now have one row inside of temperature. And notice that there are two sets of square brackets here, because the outer square brackets are saying that I have a list, and this inner square bracket says that the first element in the list temperature is the list zero zero zero. I've jumped back up to line 10 here now, and when I execute line 10, you'll see that row gets updated to one. So I'm on my second time through the loop. I'm starting all over, so new row gets recreated as a new empty list. And again, I'm going to execute this inner for loop three times. One, two, three. And my three zeros got appended to a brand new row. And I'm going to append that to my temperature variable, which is a list. So now you can see the temperature is a list with two rows. I'm back on the outer for loop, this time with row equaling its third value, two. And again, I step through this loop, creating a new row with three zeros, and I append that into the temperature variable. So now I have three rows. Of course, I have just one more to create. I'll step through this one more time and append that final row into the temperature list. So there are my four rows of three columns. Now I've completed this code except for the last line, and in the last line I said print temperature. And so I just ran that to show you, yes, there I have my list with four rows of three columns. Now, you might think that there's really no advantage to writing a for loop here when I could have just created a list literal in this comment at out code as an alternative. However, suppose that I wanted 20 rows, each with 15 columns. I would not have wanted to create the code to make those 20 rows of 15 columns. But the code that I have now is completely flexible to create that list that you can see here. There is another reason why I might have wanted to make a for loop, which is what if I want to get input from the user instead of just depending zeros onto the list. So I'm going to try that by creating a variable called next number, and I will find out from the user what number they want next. And I'm going to load these numbers into my list instead of just zeros. So right here when I say new row data, pen, zero. I'll put the next number, which is the variable that they entered the value that they entered. And notice I've changed this back to four by three because I didn't want to have to type in hundreds of values. So now I'm running this loop. I'm not using the debugger this time, so it's just running the program. And I'm going to enter a bunch of numbers. That's the first row, second row, third row, fourth row. And there's my list with the numbers that were entered by the user. The last comment that I want to make about these loops is that this is actually not a typical way in Python. Python has as a computer language with a special capability called list comprehension. And it gives us a more compact way to write the code to initialize 2D lists like we have here. And you'll be learning that a little later in the course.