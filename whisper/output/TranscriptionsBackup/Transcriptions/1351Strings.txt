 In this segment we're going to practice a little bit more with details of the string type. You've already learned quite a bit about this. You know that you can create a string to store text information by putting the text within double quotes. Alternately you can use single quotes and usually there's not a difference between those. But every once in a while, and you'll see that later, there is a difference. I'm going to use this string as the prompt for the input function. And that asks the user to type in an answer to this question. And then I'll store the answer in a variable called name. The input function always returns a string. And we can confirm that by outputting the type of that variable name. You'll see when I do this that the type is a string. str is the Python abbreviation to mean string type. Let's now talk about how you've already learned to combine words with the value of variables into one string. And you've learned a number of ways to do this. Here's one example. I use the print statement and then I've got a string, comma, a variable, comma, and then another string. And this outputs those three values in order. It's not ideal, though, because in this technique where you separate by commas the items that you want to print, it puts a space between them. And I have a space here now that I didn't want. So I'll use another technique. And that is concatenation. Here I take a string and I concatenate it. That means snap it together with another string that's created out of the variable name. And then I concatenate that with another string. You'll notice here that in this example, I've used a double quote. And the reason that I did is because if I use a single quote, it gets confounded with the apostrophe that I have in the I'm. And so Python thinks that this single quote is beginning the string and this single quote's ending it. And for that reason, in this example, I actually would prefer to use a double quote. Let's see that this runs, and it's better than my previous example, because I don't have the extra space between the two things that I wanted to output. There's yet another way. To create a string that's a little bit. Smoother for the programing. What I do is I create this hello with a blank where the name is going to go. The string that I want to output. And then right where the blank is, I want to fill in the value of the variable. In order to do that, I need to turn this into what's called an F string. F stands for format. So this is saying to Python, hey, this is going to be a formatted string. And that allows me to put between curly braces a variable name. And Python will automatically insert the value of the variable here. Let me do a print of that string, that F string, and show you that this is yet a third way. To output text together with variable values. The next thing that we want to learn how to do is use what are called escape characters. Escape characters are a way to let us include special characters into strings. So for example, in this above output. Suppose I wanted there to be a new line between the hello and their name. And this next line, I'm happy to meet you. I can't just type the new line in because that moves me to the next line of Python. So for that reason, there's a special character or an escape character. And that begins with a backslash. And in this case, it's N for new line. So backslash N means new line and you can put that right into the middle of a string. So here I see the first line and then there's a new line. So the second half of that message comes out on the next line. Another example of a special character is a tab. Backslash T inserts a tab. So right here, I have a tab between the exclamation point and the next word. Now, let's suppose. I have a desire to do an output. That has a backslash N in it. So in other words, I want to output this exact string. Backslash N is an escape character that means new line. So my first attempt at that would be to just type that. But notice that this backslash N, because backslash N is the escape character, that what happens is the backslash N doesn't get output as a backslash N, but it gets output as a new line. So what I need to do is tell Python that this backslash is a real backslash. And I do that by escaping the backslash. So backslash backslash means output a backslash. So that is the third example, and I'm going to have one more example. Which is this, I want to output the exact text I'm showing you here. Now, I already saw that I can't use a single quote here, because there's a single quote in the string. So if I surround this text with a single quote, it's going to interpret this second apostrophe as the end of my string. So I can't use a single quote. But this string also has a double quote in it. So if I put in a double quote in the beginning and end, then Python will understand this double quote to be the end of the string. So now I have a problem. I've got to use one or the other, but neither quite work. So what I'm going to do is I'll choose the double quote. I'm going to stick this into a print statement. I'll use a double quote, and now I've got to do something about these two quotes. And so maybe you've already guessed it. I'm going to escape them. Backslash double quote backslash double quote means don't interpret this next double quote as the end of the string, but instead interpret it as a quote within the quote. OK, so that worked. Let me just summarize everything that we've seen, which is backslash T is for tab, backslash N for new line, backslash double quote and backslash single quote are used for including quotes within a string, and backslash backslash is for including a backslash in the string. And there are many more. The next topic that we're going to talk about is a few ways to do what you might call arithmetic on a string. And there's a few ways to do it. We already saw that the plus is for concatenating or combining together joining strings. And there is also a way to use plus equals. Let me show you an example of that. So suppose I create a variable. Called name. And I want to concatenate onto the end of it the word man. Now, the way that I have it. You can see that name actually didn't get changed. It still says iron and not Iron Man. And the reason is this expression here, name plus man takes the value Iron Man like we want. But we never resaved that modified string into the variable name. So you can do that by saying name equals name plus man. That will work. Or you can say name plus equals man. And when I do that. I get name equals Iron Man. Now, what if I want to add a number onto the end of it? So here SQL is three and that's an integer. So if I try to say name plus equals SQL. Let's see what happens. Type error. You can only concatenate a string, not an int, to a string. And so before I do the concatenation, I have to convert SQL, which was an integer, into a string. So I end up with Iron Man three now. There's one last kind of unusual and. Not that commonly used, but kind of cool way to do arithmetic on strings is to use the star operator, and that causes a repetition. So, for example, if I say print hello. Times five, that's going to print hello. Five times. So I have my hello, hello, hello, hello, hello.